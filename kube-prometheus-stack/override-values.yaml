### Since this is GCP we will turn off the rules for ETCD, KubeProxy and alertsmanager
### The reason we turn off alertmanager is because we assume you will use alerts inside the GCP console.
defaultRules:
  create: true
  rules:
    alertmanager: false
    etcd: false
    kubeProxy: false

alertmanager:
  enabled: false

### This is assuming we will deploying to multiple clusters and wanting to centralize our observability. 
### We will discuss in another branch inside this repo on how to collect the metrics from prometheus and send them to multiple locations.
grafana:
  enabled: false

prometheus:
  serviceAccount:
    create: true
    name: ""
    ### Put the name of your GCP SA here like:
    # { iam.gke.io/gcp-service-account: gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com }
    annotations: { iam.gke.io/gcp-service-account:  }
  ### Retention is set to 30 days just in case of failure BUT it is not needed so you could drop down to 1 day or 15 days. Whatever you prefer. 
  prometheusSpec:
    image:
      registry: gke.gcr.io
      repository: prometheus-engine/prometheus
      tag: "v2.41.0-gmp.5-gke.0"
      sha: ""
    scrapeInterval: "30s"
    retention: "30d"
    resources:
      limits:
        cpu: 2000m
        memory: 8Gi
      requests:
        cpu: 500m
        memory: 1Gi

prometheusOperator:
  admissionWebhooks:
    enabled: false
  tls:
    enabled: false


### This will be the location we put all the metric relabeling
kubeApiServer:
  serviceMonitor:
    metricRelabelings:
      - action: keep
        regex: (?:apiserver_request_(?:count|total)|apiserver_request_(?:duration_seconds|latencies)_(?:count|sum)|apiserver_request_latencies_summary(?:|_count|_sum)|apiserver_request_duration_seconds_bucket)
        sourceLabels: [ __name__]

kubelet:
  serviceMonitor:
    probes: false
    resource: false
    metricRelabelings:
      - action: keep
        regex: (?:kubelet_docker_operations_errors(?:|_total)|kubelet_(?:docker|runtime)_operations_duration_seconds_(?:count|sum)|kubelet_running_(?:container|pod)(?:_count|s)|kubelet_(:?docker|runtime)_operations_latency_microseconds(?:|_count|_sum))
        sourceLabels: [__name__]
      - action: labeldrop
        regex: id
    cAdvisorMetricRelabelings:
      - action: keep
        regex: (?:container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_fs_usage_bytes|container_fs_limit_bytes|container_cpu_cfs_throttled_seconds_total|container_network_receive_bytes_total|container_network_transmit_bytes_total)
        sourceLabels: [__name__]
      - action: labelmap
        regex: container_name
        replacement: container
      - action: drop
        sourceLabels: [container]
        regex: POD
      - action: labeldrop
        regex: (id|name)

kubeControllerManager:
  serviceMonitor:
    metricRelabelings:
      - action: keep
        regex: (?:cloudprovider_.*_api_request_duration_seconds.*)
        sourceLabels: [__name__]

coreDns:
  serviceMonitor:
    metricRelabelings:
      - action: keep
        regex: (?:coredns_cache_(size|entries|(hits|misses)_total)|coredns_dns_request_duration_seconds_(count|sum)|coredns_(dns_request|dns_response_rcode|forward_request)_count_total|coredns_(forward_requests|dns_requests|dns_responses)_total|process_(cpu_seconds_total|open_fds|resident_memory_bytes))
        sourceLabels: [__name__]

kubeScheduler:
  serviceMonitor:
    metricRelabelings:
      - action: keep
        regex: (?:scheduler_(?:e2e_scheduling|binding|framework_extension_point|scheduling_algorithm)_duration_seconds.*)
        sourceLabels: [__name__]

kubeStateMetrics:
  serviceMonitor:
    metricRelabelings:
      - action: keep
        regex: (?:kube_statefulset_status_observed_generation|kube_statefulset_status_replicas|kube_statefulset_replicas|kube_statefulset_metadata_generation|kube_daemonset_status_current_number_scheduled|kube_daemonset_status_desired_number_scheduled|kube_daemonset_status_number_misscheduled|kube_daemonset_status_number_unavailable|kube_deployment_spec_replicas|kube_deployment_status_replicas_available|kube_deployment_status_replicas_unavailable|kube_node_info|kube_node_status_allocatable|kube_node_status_capacity|kube_node_status_condition|kube_hpa_spec_max_replicas|kube_hpa_spec_min_replicas|kube_hpa_status_(condition|(current|desired)_replicas)|kube_pod_container_info|kube_pod_container_resource_requests|kube_pod_container_resource_limits|kube_pod_container_status_ready|kube_pod_container_status_terminated_reason|kube_pod_container_status_waiting_reason|kube_pod_container_status_restarts_total|kube_pod_status_phase|kube_pod_info|kube_service_info|kube_service_spec_external_ip|kube_service_spec_type|kube_service_status_load_balancer_ingress)
        sourceLabels: [ __name__]

nodeExporter:
  serviceMonitor:
    metricRelabelings:
      - action: keep
        regex: (?:node_load1|node_load5|node_load15|node_cpu_seconds_total|node_disk_io_time_weighted_seconds_total|node_disk_io_time_seconds_total|node_vmstat_pgpgin|node_vmstat_pgpgout|node_memory_MemFree_bytes|node_memory_Cached_bytes|node_memory_Buffers_bytes|node_memory_MemTotal_bytes|node_network_receive_drop_total|node_network_transmit_drop_total|node_network_receive_bytes_total|node_network_transmit_bytes_total|node_filesystem_avail_bytes|node_filesystem_size_bytes)
        sourceLabels: [__name__]

